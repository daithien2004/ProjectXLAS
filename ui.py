import streamlit as st
import cv2
import numpy as np
import os
from config import (
    CHAPTER3_IMAGE_MAP, CHAPTER3_FUNCTIONS, CHAPTER4_FUNCTIONS,
    CHAPTER9_IMAGE_MAP, CHAPTER9_FUNCTIONS, CHAPTER9_IMAGE_DESCRIPTIONS,
    FACE_OPTIONS, IMAGE_FOLDER_CH3, IMAGE_FOLDER_CH9
)
import chapter3
import chapter4
import chapter9

def setup_sidebar():
    """
    Thi·∫øt l·∫≠p sidebar v·ªõi th√¥ng tin sinh vi√™n v√† menu ch·ªçn t√°c v·ª•.
    Returns: (main_task, sub_task) - T√°c v·ª• ch√≠nh v√† t√°c v·ª• chi ti·∫øt.
    """
    st.sidebar.title("üë®‚Äçüéì Th√¥ng tin sinh vi√™n")
    st.sidebar.markdown("**H·ªç t√™n:** Qu·∫£ng ƒê·∫°i Thi·ªán")
    st.sidebar.markdown("**MSSV:** 22110426")
    st.sidebar.markdown("---")

    # Kh·ªüi t·∫°o session state
    if 'main_task' not in st.session_state:
        st.session_state.main_task = "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t"
    if 'sub_task' not in st.session_state:
        st.session_state.sub_task = "Nh·∫≠n d·∫°ng t·ª´ Webcam"

    # Radio button ƒë·ªÉ ch·ªçn t√°c v·ª• ch√≠nh
    st.sidebar.header("üîç Ch·ªçn lo·∫°i t√°c v·ª•")
    main_task = st.sidebar.radio(
        "Lo·∫°i t√°c v·ª•:",
        ["Nh·∫≠n d·∫°ng khu√¥n m·∫∑t", "Nh·∫≠n d·∫°ng tr√°i c√¢y", "X·ª≠ l√Ω ·∫£nh Chapter 3", "X·ª≠ l√Ω ·∫£nh Chapter 4", "X·ª≠ l√Ω ·∫£nh Chapter 9"],
        key="main_task_selector"
    )

    # ƒê·ªìng b·ªô main_task ngay l·∫≠p t·ª©c
    if main_task != st.session_state.main_task:
        st.session_state.main_task = main_task
        # ƒê·∫∑t sub_task v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh cho main_task m·ªõi
        default_sub_tasks = {
            "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t": "Nh·∫≠n d·∫°ng t·ª´ Webcam",
            "Nh·∫≠n d·∫°ng tr√°i c√¢y": "T·∫£i l√™n ·∫£nh",
            "X·ª≠ l√Ω ·∫£nh Chapter 3": "Ch·ªçn t√°c v·ª•",
            "X·ª≠ l√Ω ·∫£nh Chapter 4": "Ch·ªçn t√°c v·ª•",
            "X·ª≠ l√Ω ·∫£nh Chapter 9": "Ch·ªçn t√°c v·ª•"
        }
        st.session_state.sub_task = default_sub_tasks[main_task]

    # Combobox cho t√°c v·ª• chi ti·∫øt
    sub_task = st.session_state.sub_task
    with st.sidebar.container():
        if main_task == "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t":
            st.sidebar.header("üîç T√°c v·ª• nh·∫≠n d·∫°ng")
            sub_task = st.sidebar.selectbox(
                "Ch·ªçn t√°c v·ª• nh·∫≠n d·∫°ng:",
                FACE_OPTIONS,
                index=FACE_OPTIONS.index(st.session_state.sub_task) if st.session_state.sub_task in FACE_OPTIONS else 0,
                key="face_sub_task_selector"
            )
        elif main_task == "Nh·∫≠n d·∫°ng tr√°i c√¢y":
            st.sidebar.header("üçé T√°c v·ª• nh·∫≠n d·∫°ng tr√°i c√¢y")
            sub_task = st.sidebar.selectbox(
                "Ch·ªçn t√°c v·ª•:",
                ["T·∫£i l√™n ·∫£nh"],
                index=0,
                key="fruit_sub_task_selector"
            )
        elif main_task == "X·ª≠ l√Ω ·∫£nh Chapter 3":
            st.sidebar.header("üñºÔ∏è T√°c v·ª• Chapter 3")
            sub_task = st.sidebar.selectbox(
                "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh:",
                list(CHAPTER3_FUNCTIONS.keys()),
                index=list(CHAPTER3_FUNCTIONS.keys()).index(st.session_state.sub_task) if st.session_state.sub_task in CHAPTER3_FUNCTIONS else 0,
                format_func=lambda x: CHAPTER3_FUNCTIONS[x],
                key="chapter3_sub_task_selector"
            )
        elif main_task == "X·ª≠ l√Ω ·∫£nh Chapter 4":
            st.sidebar.header("üñºÔ∏è T√°c v·ª• Chapter 4")
            sub_task = st.sidebar.selectbox(
                "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh:",
                list(CHAPTER4_FUNCTIONS.keys()),
                index=list(CHAPTER4_FUNCTIONS.keys()).index(st.session_state.sub_task) if st.session_state.sub_task in CHAPTER4_FUNCTIONS else 0,
                format_func=lambda x: CHAPTER4_FUNCTIONS[x],
                key="chapter4_sub_task_selector"
            )
        elif main_task == "X·ª≠ l√Ω ·∫£nh Chapter 9":
            st.sidebar.header("üñºÔ∏è T√°c v·ª• Chapter 9")
            sub_task = st.sidebar.selectbox(
                "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh:",
                list(CHAPTER9_FUNCTIONS.keys()),
                index=list(CHAPTER9_FUNCTIONS.keys()).index(st.session_state.sub_task) if st.session_state.sub_task in CHAPTER9_FUNCTIONS else 0,
                format_func=lambda x: CHAPTER9_FUNCTIONS[x],
                key="chapter9_sub_task_selector"
            )

    # C·∫≠p nh·∫≠t sub_task
    st.session_state.sub_task = sub_task

    return main_task, sub_task

def display_image_processing_ui(chapter, task, image_map, functions, image_folder, session_key, image_descriptions=None):
    """
    Hi·ªÉn th·ªã giao di·ªán x·ª≠ l√Ω ·∫£nh cho m·ªôt chapter c·ª• th·ªÉ.
    """
    st.header(f"üñºÔ∏è X·ª≠ l√Ω ·∫£nh s·ªë - {chapter}")

    if image_descriptions and task in image_descriptions:
        st.write(f"**Lo·∫°i ·∫£nh khuy·∫øn ngh·ªã**: {image_descriptions[task]}")

    use_default_image = st.checkbox("S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh", value=True, key=f"{session_key}_default_image")

    img = None
    if use_default_image:
        if task in image_map:
            image_path = os.path.join(image_folder, image_map[task])
            try:
                is_grayscale = task not in ["NegativeColor", "HistEqualColor"] if chapter == "Chapter 3" else True
                img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE if is_grayscale else cv2.IMREAD_COLOR)
                if img is None:
                    st.error(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {image_path}")
                    return
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i ·∫£nh m·∫∑c ƒë·ªãnh: {str(e)}")
                st.warning(f"Vui l√≤ng ki·ªÉm tra file {image_path} trong th∆∞ m·ª•c {image_folder}.")
                return
    else:
        uploaded_image = st.file_uploader(
            "üì§ T·∫£i l√™n ·∫£nh ƒë·ªÉ x·ª≠ l√Ω",
            type=["jpg", "jpeg", "png", "tif"],
            help="H·ªó tr·ª£ ·∫£nh JPG, PNG, TIFF",
            key=f"{session_key}_uploader"
        )
        if uploaded_image:
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            is_grayscale = task not in ["NegativeColor", "HistEqualColor"] if chapter == "Chapter 3" else True
            img = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE if is_grayscale else cv2.IMREAD_COLOR)

    if img is not None:
        try:
            module = {"Chapter 3": chapter3, "Chapter 4": chapter4, "Chapter 9": chapter9}
            processed_img = getattr(module[chapter], task)(img)

            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True, channels="BGR" if img.ndim == 3 else "GRAY")
            with col2:
                st.image(processed_img, caption=f"K·∫øt qu·∫£ ({functions[task]})", use_column_width=True, channels="BGR" if processed_img.ndim == 3 else "GRAY")

            if st.button(f"üíæ T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω ({chapter})"):
                _, encoded_img = cv2.imencode('.png', processed_img)
                st.download_button(
                    label="Nh·∫•n ƒë·ªÉ t·∫£i xu·ªëng",
                    data=encoded_img.tobytes(),
                    file_name=f"processed_{task}.png",
                    mime="image/png"
                )
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
            st.warning(f"Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu v√†o (x√°m/m√†u) ph√π h·ª£p v·ªõi ch·ª©c nƒÉng ƒë√£ ch·ªçn.")