import streamlit as st
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
import av
import cv2
import numpy as np
import joblib
import tempfile
import chapter3
import chapter4
import chapter9
import os

# ============ C·∫§U H√åNH WEBRTC =============
RTC_CONFIGURATION = RTCConfiguration({
    "iceServers": [
        {"urls": ["stun:stun.relay.metered.ca:80"]},
        {
            "urls": ["turn:global.relay.metered.ca:80"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        },
        {
            "urls": ["turn:global.relay.metered.ca:443"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        },
        {
            "urls": ["turns:global.relay.metered.ca:443?transport=tcp"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        }
    ]
})

# ============ STREAMLIT SETUP =============
st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh s·ªë", layout="wide")
st.title("üì∏ ƒê·ªí √ÅN X·ª¨ L√ù ·∫¢NH")
st.markdown("---")

st.sidebar.title("üë®‚Äçüéì Th√¥ng tin sinh vi√™n")
st.sidebar.markdown("**H·ªç t√™n:** Qu·∫£ng ƒê·∫°i Thi·ªán")
st.sidebar.markdown("**MSSV:** 22110426")
st.sidebar.markdown("---")

# Kh·ªüi t·∫°o session state ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i combobox
if 'face_task' not in st.session_state:
    st.session_state.face_task = "Nh·∫≠n d·∫°ng t·ª´ Webcam"  # M·∫∑c ƒë·ªãnh l√† Webcam
if 'chapter3_task' not in st.session_state:
    st.session_state.chapter3_task = "Ch·ªçn t√°c v·ª•"
if 'chapter4_task' not in st.session_state:
    st.session_state.chapter4_task = "Ch·ªçn t√°c v·ª•"
if 'chapter9_task' not in st.session_state:
    st.session_state.chapter9_task = "Ch·ªçn t√°c v·ª•"

# ============ COMBOBOX NH·∫¨N D·∫†NG KHU√îN M·∫∂T =============
st.sidebar.header("üîç Nh·∫≠n d·∫°ng khu√¥n m·∫∑t")
face_options = ["Ch·ªçn t√°c v·ª•", "Nh·∫≠n d·∫°ng t·ª´ Webcam", "Nh·∫≠n d·∫°ng t·ª´ video m·∫´u", "Nh·∫≠n d·∫°ng t·ª´ video upload"]
face_task = st.sidebar.selectbox(
    "Ch·ªçn t√°c v·ª• nh·∫≠n d·∫°ng:",
    face_options,
    index=face_options.index(st.session_state.face_task),
    key="face_task_selector"
)

# C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ch·ªçn t√°c v·ª• Nh·∫≠n d·∫°ng khu√¥n m·∫∑t
if face_task != st.session_state.face_task:
    st.session_state.face_task = face_task
    if face_task != "Ch·ªçn t√°c v·ª•":
        st.session_state.chapter3_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 3
        st.session_state.chapter4_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 4
        st.session_state.chapter9_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 9

# ============ COMBOBOX X·ª¨ L√ù ·∫¢NH CHAPTER 3 =============
st.sidebar.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh Chapter 3")
chapter3_functions = {
    "Ch·ªçn t√°c v·ª•": "Ch·ªçn t√°c v·ª•",
    "Negative": "·∫¢nh √¢m b·∫£n (x√°m)",
    "NegativeColor": "·∫¢nh √¢m b·∫£n (m√†u)",
    "Logarit": "Bi·∫øn ƒë·ªïi Logarit",
    "Power": "Bi·∫øn ƒë·ªïi l≈©y th·ª´a",
    "PiecewisetLine": "Bi·∫øn ƒë·ªïi tuy·∫øn t√≠nh t·ª´ng kh√∫c",
    "Histogram": "Hi·ªÉn th·ªã histogram",
    "Hist_equal": "C√¢n b·∫±ng histogram (x√°m)",
    "HistEqualColor": "C√¢n b·∫±ng histogram (m√†u)",
    "LocalHist": "C√¢n b·∫±ng histogram c·ª•c b·ªô",
    "HistStat": "L·ªçc theo th·ªëng k√™ histogram",
    "Sharpening": "L√†m n√©t ·∫£nh (Laplacian)",
    "SharpeningMask": "L√†m n√©t ·∫£nh (SharpeningMask)",
    "Gradient": "Bi√™n ·∫£nh (Gradient)"
}
chapter3_task = st.sidebar.selectbox(
    "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh (Chapter 3):",
    list(chapter3_functions.keys()),
    index=list(chapter3_functions.keys()).index(st.session_state.chapter3_task),
    format_func=lambda x: chapter3_functions[x],
    key="chapter3_task_selector"
)

# C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ch·ªçn t√°c v·ª• Chapter 3
if chapter3_task != st.session_state.chapter3_task:
    st.session_state.chapter3_task = chapter3_task
    if chapter3_task != "Ch·ªçn t√°c v·ª•":
        st.session_state.face_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Nh·∫≠n d·∫°ng khu√¥n m·∫∑t
        st.session_state.chapter4_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 4
        st.session_state.chapter9_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 9
        st.rerun()

# √Ånh x·∫° t√°c v·ª• Chapter 3 t·ªõi file ·∫£nh
chapter3_image_map = {
    "Negative": "3.1.tif",
    "NegativeColor": "3.12.tif",
    "Logarit": "3.2.tif",
    "Power": "3.3.tif",
    "PiecewisetLine": "3.5.jpg",
    "Histogram": "3.6.tif",
    "Hist_equal": "3.7.tif",
    "HistEqualColor": "3.8.tif",
    "LocalHist": "3.9.tif",
    "HistStat": "3.10.tif",
    "Sharpening": "3.11.tif",
    "SharpeningMask": "3.12.tif",
    "Gradient": "3.13.tif" 
}
image_folder = "PictureForChapter3"  # Th∆∞ m·ª•c ch·ª©a ·∫£nh

# ============ COMBOBOX X·ª¨ L√ù ·∫¢NH CHAPTER 4 =============
st.sidebar.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh Chapter 4")
chapter4_functions = {
    "Ch·ªçn t√°c v·ª•": "Ch·ªçn t√°c v·ª•",
    "Spectrum": "Ph·ªï t·∫ßn s·ªë",
    "RemoveMoire": "Lo·∫°i b·ªè nhi·ªÖu Moire",
    "RemoveInterference": "Lo·∫°i b·ªè nhi·ªÖu giao thoa",
    "RemoveMoireSimple": "Lo·∫°i b·ªè nhi·ªÖu Moire (ƒë∆°n gi·∫£n)",
    "RemoveInferenceFilter": "Lo·∫°i b·ªè nhi·ªÖu giao thoa (b·ªô l·ªçc)",
    "DrawInferenceFilter": "V·∫Ω b·ªô l·ªçc giao thoa",
    "CreateMotion": "T·∫°o hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông",
    "CreateDemotion": "Kh·ª≠ hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông"
}
chapter4_task = st.sidebar.selectbox(
    "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh (Chapter 4):",
    list(chapter4_functions.keys()),
    index=list(chapter4_functions.keys()).index(st.session_state.chapter4_task),
    format_func=lambda x: chapter4_functions[x],
    key="chapter4_task_selector"
)

# C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ch·ªçn t√°c v·ª• Chapter 4
if chapter4_task != st.session_state.chapter4_task:
    st.session_state.chapter4_task = chapter4_task
    if chapter4_task != "Ch·ªçn t√°c v·ª•":
        st.session_state.face_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Nh·∫≠n d·∫°ng khu√¥n m·∫∑t
        st.session_state.chapter3_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 3
        st.session_state.chapter9_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 9

# ============ COMBOBOX X·ª¨ L√ù ·∫¢NH CHAPTER 9 =============
st.sidebar.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh Chapter 9")
chapter9_functions = {
    "Ch·ªçn t√°c v·ª•": "Ch·ªçn t√°c v·ª•",
    "Erosion": "X√≥i m√≤n",
    "Dilation": "Gi√£n n·ªü",
    "Boundary": "Tr√≠ch bi√™n",
    "Counter": "V·∫Ω ƒë∆∞·ªùng vi·ªÅn (Contours)"
}
chapter9_task = st.sidebar.selectbox(
    "Ch·ªçn t√°c v·ª• x·ª≠ l√Ω ·∫£nh (Chapter 9):",
    list(chapter9_functions.keys()),
    index=list(chapter9_functions.keys()).index(st.session_state.chapter9_task),
    format_func=lambda x: chapter9_functions[x],
    key="chapter9_task_selector"
)

# C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ch·ªçn t√°c v·ª• Chapter 9
if chapter9_task != st.session_state.chapter9_task:
    st.session_state.chapter9_task = chapter9_task
    if chapter9_task != "Ch·ªçn t√°c v·ª•":
        st.session_state.face_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Nh·∫≠n d·∫°ng khu√¥n m·∫∑t
        st.session_state.chapter3_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 3
        st.session_state.chapter4_task = "Ch·ªçn t√°c v·ª•"  # ƒê·∫∑t l·∫°i Chapter 4

# ============ LOGIC X·ª¨ L√ù =============
# Hi·ªÉn th·ªã giao di·ªán d·ª±a tr√™n t√°c v·ª• ƒë∆∞·ª£c ch·ªçn
if st.session_state.chapter3_task != "Ch·ªçn t√°c v·ª•":
    # Hi·ªÉn th·ªã giao di·ªán X·ª≠ l√Ω ·∫£nh Chapter 3
    st.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh s·ªë - Chapter 3")

    # Checkbox ƒë·ªÉ ch·ªçn gi·ªØa ·∫£nh m·∫∑c ƒë·ªãnh v√† upload th·ªß c√¥ng
    use_default_image = st.checkbox("S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh", value=True, key="chapter3_default_image")

    if use_default_image:
        # T·∫£i ·∫£nh m·∫∑c ƒë·ªãnh t·ª´ th∆∞ m·ª•c
        image_path = os.path.join(image_folder, chapter3_image_map[st.session_state.chapter3_task])
        try:
            img = cv2.imread(image_path, cv2.IMREAD_COLOR if st.session_state.chapter3_task in ["NegativeColor", "HistEqualColor"] else cv2.IMREAD_GRAYSCALE)
            if img is None:
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {image_path}")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i ·∫£nh m·∫∑c ƒë·ªãnh: {str(e)}")
            st.warning(f"Vui l√≤ng ki·ªÉm tra file {image_path} trong th∆∞ m·ª•c {image_folder}.")
            img = None
    else:
        # T√πy ch·ªçn upload ·∫£nh th·ªß c√¥ng
        uploaded_image = st.file_uploader(
            "üì§ T·∫£i l√™n ·∫£nh ƒë·ªÉ x·ª≠ l√Ω",
            type=["jpg", "jpeg", "png", "tif"],
            help="H·ªó tr·ª£ ·∫£nh JPG, PNG, TIFF",
            key="chapter3_uploader"
        )
        if uploaded_image is not None:
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR if st.session_state.chapter3_task in ["NegativeColor", "HistEqualColor"] else cv2.IMREAD_GRAYSCALE)
        else:
            img = None

    if img is not None:
        # X·ª≠ l√Ω ·∫£nh
        try:
            processed_img = getattr(chapter3, st.session_state.chapter3_task)(img)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True)
            with col2:
                st.image(processed_img,
                         caption=f"K·∫øt qu·∫£ ({chapter3_functions[st.session_state.chapter3_task]})",
                         use_column_width=True)

            # T√πy ch·ªçn t·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω
            if st.button("üíæ T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω (Chapter 3)"):
                _, encoded_img = cv2.imencode('.png', processed_img)
                st.download_button(
                    label="Nh·∫•n ƒë·ªÉ t·∫£i xu·ªëng",
                    data=encoded_img.tobytes(),
                    file_name=f"processed_{st.session_state.chapter3_task}.png",
                    mime="image/png"
                )

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
            st.warning(f"Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu v√†o (x√°m/m√†u) ph√π h·ª£p v·ªõi ch·ª©c nƒÉng ƒë√£ ch·ªçn.")

elif st.session_state.chapter4_task != "Ch·ªçn t√°c v·ª•":
    # Hi·ªÉn th·ªã giao di·ªán X·ª≠ l√Ω ·∫£nh Chapter 4
    st.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh s·ªë - Chapter 4")

    uploaded_image = st.file_uploader(
        "üì§ T·∫£i l√™n ·∫£nh ƒë·ªÉ x·ª≠ l√Ω",
        type=["jpg", "jpeg", "png", "tif"],
        help="H·ªó tr·ª£ ·∫£nh JPG, PNG, TIFF (·∫£nh x√°m ƒë∆∞·ª£c khuy·∫øn ngh·ªã)",
        key="chapter4_uploader"
    )

    if uploaded_image is not None:
        # ƒê·ªçc ·∫£nh
        file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
        img = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)  # Chapter 4 y√™u c·∫ßu ·∫£nh x√°m

        # X·ª≠ l√Ω ·∫£nh
        try:
            processed_img = getattr(chapter4, st.session_state.chapter4_task)(img)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True)
            with col2:
                st.image(processed_img,
                         caption=f"K·∫øt qu·∫£ ({chapter4_functions[st.session_state.chapter4_task]})",
                         use_column_width=True)

            # T√πy ch·ªçn t·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω
            if st.button("üíæ T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω (Chapter 4)"):
                _, encoded_img = cv2.imencode('.png', processed_img)
                st.download_button(
                    label="Nh·∫•n ƒë·ªÉ t·∫£i xu·ªëng",
                    data=encoded_img.tobytes(),
                    file_name=f"processed_{st.session_state.chapter4_task}.png",
                    mime="image/png"
                )

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
            st.warning("Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu v√†o (·∫£nh x√°m ƒë∆∞·ª£c y√™u c·∫ßu).")

elif st.session_state.chapter9_task != "Ch·ªçn t√°c v·ª•":
    # Hi·ªÉn th·ªã giao di·ªán X·ª≠ l√Ω ·∫£nh Chapter 9
    st.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh s·ªë - Chapter 9")

    uploaded_image = st.file_uploader(
        "üì§ T·∫£i l√™n ·∫£nh ƒë·ªÉ x·ª≠ l√Ω",
        type=["jpg", "jpeg", "png", "tif"],
        help="H·ªó tr·ª£ ·∫£nh JPG, PNG, TIFF (·∫£nh nh·ªã ph√¢n ho·∫∑c x√°m ƒë∆∞·ª£c khuy·∫øn ngh·ªã)",
        key="chapter9_uploader"
    )

    if uploaded_image is not None:
        # ƒê·ªçc ·∫£nh
        file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
        img = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)  # Chapter 9 y√™u c·∫ßu ·∫£nh x√°m

        # X·ª≠ l√Ω ·∫£nh
        try:
            processed_img = getattr(chapter9, st.session_state.chapter9_task)(img)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True)
            with col2:
                st.image(processed_img,
                         caption=f"K·∫øt qu·∫£ ({chapter9_functions[st.session_state.chapter9_task]})",
                         use_column_width=True)

            # T√πy ch·ªçn t·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω
            if st.button("üíæ T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω (Chapter 9)"):
                _, encoded_img = cv2.imencode('.png', processed_img)
                st.download_button(
                    label="Nh·∫•n ƒë·ªÉ t·∫£i xu·ªëng",
                    data=encoded_img.tobytes(),
                    file_name=f"processed_{st.session_state.chapter9_task}.png",
                    mime="image/png"
                )

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
            st.warning("Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu v√†o (·∫£nh nh·ªã ph√¢n ho·∫∑c x√°m ƒë∆∞·ª£c y√™u c·∫ßu).")

elif st.session_state.face_task != "Ch·ªçn t√°c v·ª•":
    # Hi·ªÉn th·ªã giao di·ªán Nh·∫≠n d·∫°ng khu√¥n m·∫∑t
    st.header("üîç Nh·∫≠n d·∫°ng khu√¥n m·∫∑t")

    # Load model nh·∫≠n d·∫°ng khu√¥n m·∫∑t
    svc = joblib.load('model/svc.pkl')
    mydict = ['AnhKhoa', 'DaiThien', 'Loc', 'LyHung', 'TamTue']
    color = [(0, 255, 0), (255, 0, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255)]

    detector = cv2.FaceDetectorYN.create(
        "model/face_detection_yunet_2023mar.onnx", "", (320, 320), 0.9, 0.3, 5000)
    recognizer = cv2.FaceRecognizerSF.create(
        "model/face_recognition_sface_2021dec.onnx", "")

    # H√†m x·ª≠ l√Ω frame
    def process_frame(frame):
        img = frame.copy()
        h, w, _ = img.shape
        detector.setInputSize((w, h))

        faces = detector.detect(img)
        if faces[1] is not None:
            for face in faces[1]:
                aligned = recognizer.alignCrop(img, face)
                feat = recognizer.feature(aligned)
                pred = svc.predict(feat)
                label = mydict[pred[0]]
                coords = face[:4].astype(np.int32)
                cv2.rectangle(img, (coords[0], coords[1]), (coords[0]+coords[2], coords[1]+coords[3]), color[pred[0]], 2)
                cv2.putText(img, label, (coords[0], coords[1]-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color[pred[0]], 2)
        return img

    # X·ª≠ l√Ω video stream
    class RealTimeProcessor:
        def recv(self, frame):
            img = frame.to_ndarray(format="bgr24")
            img = process_frame(img)
            return av.VideoFrame.from_ndarray(img, format="bgr24")

    # X·ª≠ l√Ω c√°c t√°c v·ª• nh·∫≠n d·∫°ng
    if st.session_state.face_task == "Nh·∫≠n d·∫°ng t·ª´ Webcam":
        st.subheader("üì∑ Nh·∫≠n d·∫°ng t·ª´ Webcam")
        webrtc_streamer(
            key="realtime",
            mode=WebRtcMode.SENDRECV,
            rtc_configuration=RTC_CONFIGURATION,
            media_stream_constraints={"video": True, "audio": False},
            video_processor_factory=RealTimeProcessor,
            async_processing=True,
        )

    elif st.session_state.face_task == "Nh·∫≠n d·∫°ng t·ª´ video m·∫´u":
        st.subheader("üéûÔ∏è Nh·∫≠n d·∫°ng t·ª´ video m·∫´u")
        video_path = "nhandien.mp4"
        video_file = open(video_path, 'rb')
        st.video(video_file.read())

        cap = cv2.VideoCapture(video_path)
        FRAME_WINDOW = st.image([])

        run = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng")
        stop = st.button("‚èπÔ∏è D·ª´ng l·∫°i")

        if run:
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                frame = process_frame(frame)
                FRAME_WINDOW.image(frame, channels="BGR")
                if stop:
                    break
            cap.release()

    elif st.session_state.face_task == "Nh·∫≠n d·∫°ng t·ª´ video upload":
        st.subheader("üì§ Nh·∫≠n d·∫°ng t·ª´ video upload")
        uploaded_file = st.file_uploader("T·∫£i l√™n video (mp4, avi, mov...)", type=["mp4", "avi", "mov"])

        if uploaded_file is not None:
            tfile = tempfile.NamedTemporaryFile(delete=False)
            tfile.write(uploaded_file.read())
            video_path = tfile.name

            st.video(video_path)

            cap = cv2.VideoCapture(video_path)
            FRAME_WINDOW = st.image([])

            run_upload = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng")
            stop_upload = st.button("‚èπÔ∏è D·ª´ng l·∫°i")

            if run_upload:
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    frame = process_frame(frame)
                    FRAME_WINDOW.image(frame, channels="BGR")
                    if stop_upload:
                        break
                cap.release()

else:
    # Hi·ªÉn th·ªã giao di·ªán m·∫∑c ƒë·ªãnh (Nh·∫≠n d·∫°ng t·ª´ Webcam)
    st.header("üîç Nh·∫≠n d·∫°ng khu√¥n m·∫∑t")
    st.subheader("üì∑ Nh·∫≠n d·∫°ng t·ª´ Webcam")

    # Load model nh·∫≠n d·∫°ng khu√¥n m·∫∑t
    svc = joblib.load('model/svc.pkl')
    mydict = ['AnhKhoa', 'DaiThien', 'Loc', 'LyHung', 'TamTue']
    color = [(0, 255, 0), (255, 0, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255)]

    detector = cv2.FaceDetectorYN.create(
        "model/face_detection_yunet_2023mar.onnx", "", (320, 320), 0.9, 0.3, 5000)
    recognizer = cv2.FaceRecognizerSF.create(
        "model/face_recognition_sface_2021dec.onnx", "")

    # H√†m x·ª≠ l√Ω frame
    def process_frame(frame):
        img = frame.copy()
        h, w, _ = img.shape
        detector.setInputSize((w, h))

        faces = detector.detect(img)
        if faces[1] is not None:
            for face in faces[1]:
                aligned = recognizer.alignCrop(img, face)
                feat = recognizer.feature(aligned)
                pred = svc.predict(feat)
                label = mydict[pred[0]]
                coords = face[:4].astype(np.int32)
                cv2.rectangle(img, (coords[0], coords[1]), (coords[0]+coords[2], coords[1]+coords[3]), color[pred[0]], 2)
                cv2.putText(img, label, (coords[0], coords[1]-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color[pred[0]], 2)
        return img

    # X·ª≠ l√Ω video stream
    class RealTimeProcessor:
        def recv(self, frame):
            img = frame.to_ndarray(format="bgr24")
            img = process_frame(img)
            return av.VideoFrame.from_ndarray(img, format="bgr24")

    webrtc_streamer(
        key="realtime",
        mode=WebRtcMode.SENDRECV,
        rtc_configuration=RTC_CONFIGURATION,
        media_stream_constraints={"video": True, "audio": False},
        video_processor_factory=RealTimeProcessor,
        async_processing=True,
    )