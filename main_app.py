import streamlit as st
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
import av
import cv2
import numpy as np
import joblib
import tempfile
import chapter3

# ============ C·∫§U H√åNH WEBRTC =============
RTC_CONFIGURATION = RTCConfiguration({
    "iceServers": [
        {"urls": ["stun:stun.relay.metered.ca:80"]},
        {
            "urls": ["turn:global.relay.metered.ca:80"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        },
        {
            "urls": ["turn:global.relay.metered.ca:443"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        },
        {
            "urls": ["turns:global.relay.metered.ca:443?transport=tcp"],
            "username": "e19de69abf4542dbf3820d61",
            "credential": "9/VaW0S2PKXSyoF9",
        }
    ]
})

# ============ STREAMLIT SETUP =============
st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh s·ªë", layout="wide")
st.title("üì∏ ƒê·ªí √ÅN X·ª¨ L√ù ·∫¢NH")
st.markdown("---")

st.sidebar.title("üë®‚Äçüéì Th√¥ng tin sinh vi√™n")
st.sidebar.markdown("**H·ªç t√™n:** Qu·∫£ng ƒê·∫°i Thi·ªán")
st.sidebar.markdown("**MSSV:** 22110426")
st.sidebar.markdown("---")

# ============ L·ª∞A CH·ªåN CH·ª®C NƒÇNG =============
app_mode = st.sidebar.selectbox("üéØ Ch·ªçn ch·∫ø ƒë·ªô ch√≠nh:", 
                               ["Nh·∫≠n d·∫°ng khu√¥n m·∫∑t", "X·ª≠ l√Ω ·∫£nh Chapter 3"])

if app_mode == "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t":
    # ============ LOAD MODEL NH·∫¨N D·∫†NG KHU√îN M·∫∂T =============
    svc = joblib.load('model/svc.pkl')
    mydict = ['AnhKhoa', 'DaiThien', 'Loc', 'LyHung', 'TamTue']
    color = [(0, 255, 0), (255, 0, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255)]  

    detector = cv2.FaceDetectorYN.create(
        "model/face_detection_yunet_2023mar.onnx", "", (320, 320), 0.9, 0.3, 5000)
    recognizer = cv2.FaceRecognizerSF.create(
        "model/face_recognition_sface_2021dec.onnx", "")

    # ============ H√ÄM X·ª¨ L√ù FRAME =============
    def process_frame(frame):
        img = frame.copy()
        h, w, _ = img.shape
        detector.setInputSize((w, h))

        faces = detector.detect(img)
        if faces[1] is not None:
            for face in faces[1]:
                aligned = recognizer.alignCrop(img, face)
                feat = recognizer.feature(aligned)
                pred = svc.predict(feat)
                label = mydict[pred[0]]
                coords = face[:4].astype(np.int32)
                cv2.rectangle(img, (coords[0], coords[1]), (coords[0]+coords[2], coords[1]+coords[3]), color[pred[0]], 2)
                cv2.putText(img, label, (coords[0], coords[1]-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color[pred[0]], 2)
        return img

    # ============ X·ª¨ L√ù VIDEO STREAM =============
    class RealTimeProcessor:
        def recv(self, frame):
            img = frame.to_ndarray(format="bgr24")
            img = process_frame(img)
            return av.VideoFrame.from_ndarray(img, format="bgr24")

    # ============ L·ª∞A CH·ªåN CH·∫æ ƒê·ªò NH·∫¨N D·∫†NG =============
    face_option = st.sidebar.selectbox("üîç Ch·ªçn ch·∫ø ƒë·ªô nh·∫≠n d·∫°ng:", 
                                     ["Nh·∫≠n d·∫°ng webcam", "Nh·∫≠n d·∫°ng video m·∫´u", "Upload video nh·∫≠n d·∫°ng"])

    if face_option == "Nh·∫≠n d·∫°ng webcam":
        st.subheader("üì∑ Nh·∫≠n d·∫°ng khu√¥n m·∫∑t t·ª´ Webcam")
        webrtc_streamer(
            key="realtime",
            mode=WebRtcMode.SENDRECV,
            rtc_configuration=RTC_CONFIGURATION,
            media_stream_constraints={"video": True, "audio": False},
            video_processor_factory=RealTimeProcessor,
            async_processing=True,
        )

    elif face_option == "Nh·∫≠n d·∫°ng video m·∫´u":
        st.subheader("üéûÔ∏è Nh·∫≠n d·∫°ng t·ª´ video m·∫´u")
        video_path = "nhandien.mp4"
        video_file = open(video_path, 'rb')
        st.video(video_file.read())

        cap = cv2.VideoCapture(video_path)
        FRAME_WINDOW = st.image([])

        run = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng")
        stop = st.button("‚èπÔ∏è D·ª´ng l·∫°i")

        if run:
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                frame = process_frame(frame)
                FRAME_WINDOW.image(frame, channels="BGR")
                if stop:
                    break
            cap.release()

    elif face_option == "Upload video nh·∫≠n d·∫°ng":
        st.subheader("üì§ Upload video t·ª´ m√°y t√≠nh")
        uploaded_file = st.file_uploader("T·∫£i l√™n video (mp4, avi, mov...)", type=["mp4", "avi", "mov"])

        if uploaded_file is not None:
            tfile = tempfile.NamedTemporaryFile(delete=False)
            tfile.write(uploaded_file.read())
            video_path = tfile.name

            st.video(video_path)

            cap = cv2.VideoCapture(video_path)
            FRAME_WINDOW = st.image([])

            run_upload = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng")
            stop_upload = st.button("‚èπÔ∏è D·ª´ng l·∫°i")

            if run_upload:
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    frame = process_frame(frame)
                    FRAME_WINDOW.image(frame, channels="BGR")
                    if stop_upload:
                        break
                cap.release()

elif app_mode == "X·ª≠ l√Ω ·∫£nh Chapter 3":
    st.subheader("üñºÔ∏è X·ª≠ l√Ω ·∫£nh s·ªë - Chapter 3")
    
    # Danh s√°ch c√°c ch·ª©c nƒÉng t·ª´ chapter3
    chapter3_functions = {
        "Negative": "·∫¢nh √¢m b·∫£n (x√°m)",
        "NegativeColor": "·∫¢nh √¢m b·∫£n (m√†u)",
        "Logarit": "Bi·∫øn ƒë·ªïi Logarit",
        "Power": "Bi·∫øn ƒë·ªïi l≈©y th·ª´a",
        "PiecewisetLine": "Bi·∫øn ƒë·ªïi tuy·∫øn t√≠nh t·ª´ng kh√∫c",
        "Histogram": "Hi·ªÉn th·ªã histogram",
        "Hist_equal": "C√¢n b·∫±ng histogram (x√°m)",
        "HistEqualColor": "C√¢n b·∫±ng histogram (m√†u)",
        "LocalHist": "C√¢n b·∫±ng histogram c·ª•c b·ªô",
        "HistStat": "L·ªçc theo th·ªëng k√™ histogram",
        "Sharpening": "L√†m n√©t ·∫£nh (Laplacian)",
        "SharpeningMask": "L√†m n√©t ·∫£nh (SharpeningMask)",
        "Gradient": "Bi√™n ·∫£nh (Gradient)"
    }
    
    selected_func = st.sidebar.selectbox(
        "üîß Ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω ·∫£nh:",
        list(chapter3_functions.keys()),
        format_func=lambda x: chapter3_functions[x]
    )
    
    uploaded_image = st.file_uploader(
        "üì§ T·∫£i l√™n ·∫£nh ƒë·ªÉ x·ª≠ l√Ω", 
        type=["jpg", "jpeg", "png", "tif"],
        help="H·ªó tr·ª£ ·∫£nh JPG, PNG, TIFF"
    )
    
    if uploaded_image is not None:
        # ƒê·ªçc ·∫£nh
        file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
        img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR if selected_func in ["NegativeColor", "HistEqualColor"] else cv2.IMREAD_GRAYSCALE)
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True)
        
        # X·ª≠ l√Ω ·∫£nh
        try:
            processed_img = getattr(chapter3, selected_func)(img)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True)
            with col2:
                st.image(processed_img, 
                         caption=f"K·∫øt qu·∫£ ({chapter3_functions[selected_func]})", 
                         use_column_width=True)
            
            # T√πy ch·ªçn t·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω
            if st.button("üíæ T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω"):
                _, encoded_img = cv2.imencode('.png', processed_img)
                st.download_button(
                    label="Nh·∫•n ƒë·ªÉ t·∫£i xu·ªëng",
                    data=encoded_img.tobytes(),
                    file_name=f"processed_{selected_func}.png",
                    mime="image/png"
                )
                
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
            st.warning(f"Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu v√†o (x√°m/m√†u) ph√π h·ª£p v·ªõi ch·ª©c nƒÉng ƒë√£ ch·ªçn")